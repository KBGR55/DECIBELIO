name: 50 DAST Scan Docker Image

on:
  workflow_dispatch:
    inputs:
      image-tag:
        description: 'The Docker image to scan'
        required: true
        type: string

  workflow_call:
    inputs:
      image-tag:
        description: 'The Docker image to scan'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  APP_PORT: 9080
  IMAGE_TAG: ${{ inputs.image-tag }}
  ZAP_PORT: 8080

jobs:
  dast-scan:
    runs-on: ubuntu-latest
    container: 
      image: ghcr.io/zaproxy/zaproxy:stable
      options: --network host

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull target image
        run: docker pull ${{ env.IMAGE_TAG }}

      - name: Run target container
        run: |
          docker rm -f demoApp || true
          docker run -d \
            -p ${{ env.APP_PORT }}:${{ env.APP_PORT }} \
            --name demoApp \
            ${{ env.IMAGE_TAG }}

      - name: Wait for application
        run: |
          echo "Waiting for app on port ${{ env.APP_PORT }}..."
          for i in {1..30}; do
            if curl -sSf http://localhost:${{ env.APP_PORT }}/health >/dev/null; then
              echo "Application ready"
              exit 0
            fi
            sleep 5
          done
          echo "Application not ready after 150 seconds"
          docker logs demoApp
          exit 1

      - name: Run ZAP scan
        run: |
          zap-full-scan.py \
            -t http://localhost:${{ env.APP_PORT }} \
            -r zap_report.html \
            -x zap_report.xml \
            -I

      - name: Upload ZAP reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: |
            zap_report.html
            zap_report.xml
          retention-days: 7

      - name: Cleanup
        run: |
          docker rm -f demoApp || true
          docker logout ghcr.io