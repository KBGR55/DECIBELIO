name: 06 Build and Deploy Docker Stack

on:
  workflow_dispatch:
  workflow_call:
    outputs:
      image-tag:
        description: "The tag of the built Docker image"
        value: ${{ jobs.docker.outputs.image-tag }}

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  POSTGRES_VERSION: 16.3-alpine
  DB_PORT_PUBLIC: 5433
  POSTGRES_DB: decibeliodb
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: admin@987
  LOCAL_DATA_DIR_BD: /home/runner/opt/docker-pgdata/decibelio
  LOCAL_LOGS_DIR_API: /home/runner/opt/logs/decibelio-api
  DRIVER_JDBC_DIR: target/lib

jobs:
  build:
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Build application and download JDBC driver
        run: |
          cd decibelio
          ./mvnw clean package liberty:package
          mkdir -p target/lib
          # Download PostgreSQL JDBC driver
          wget -P target/lib/ https://jdbc.postgresql.org/download/postgresql-42.7.3.jar
          # Verify the file exists
          ls -la target/lib/

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=ref,event=branch

      - name: Build and push API image
        uses: docker/build-push-action@v4
        with:
          context: ./decibelio
          file: ./decibelio/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            DRIVER_JDBC_DIR=${{ env.DRIVER_JDBC_DIR }}
            DB_SERVER_NAME=decibelio-db
            DB_PORT_NUMBER=5432
            DB_NAME=${{ env.POSTGRES_DB }}
            DB_USER=${{ env.POSTGRES_USER }}
            DB_PASSWORD=${{ env.POSTGRES_PASSWORD }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify docker-compose exists
        run: |
          cd decibelio-deploy
          if [ ! -f "docker-compose.yml" ]; then
            echo "ERROR: docker-compose.yml not found in decibelio-deploy directory!"
            ls -la
            exit 1
          fi

      - name: Set up Docker Compose
        run: |
          mkdir -p ${{ env.LOCAL_DATA_DIR_BD }}
          mkdir -p ${{ env.LOCAL_LOGS_DIR_API }}
          chmod -R 777 ${{ env.LOCAL_DATA_DIR_BD }}
          chmod -R 777 ${{ env.LOCAL_LOGS_DIR_API }}

      - name: Deploy stack
        working-directory: ./decibelio-deploy
        run: |
          echo "POSTGRES_VERSION=${{ env.POSTGRES_VERSION }}" > .env
          echo "DB_PORT_PUBLIC=${{ env.DB_PORT_PUBLIC }}" >> .env
          echo "LOCAL_DATA_DIR_BD=${{ env.LOCAL_DATA_DIR_BD }}" >> .env
          echo "POSTGRES_DB=${{ env.POSTGRES_DB }}" >> .env
          echo "POSTGRES_USER=${{ env.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}" >> .env
          echo "DRIVER_JDBC_DIR=${{ env.DRIVER_JDBC_DIR }}" >> .env
          echo "LOCAL_LOGS_DIR_API=${{ env.LOCAL_LOGS_DIR_API }}" >> .env
          
          docker compose down --remove-orphans || true
          docker compose up -d --build

      - name: Verify deployment
        run: |
          docker ps
          docker logs decibelio-api
          docker logs decibelio-db