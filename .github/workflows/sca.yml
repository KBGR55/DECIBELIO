name: 03 SCA

on:
  workflow_dispatch:
  workflow_call:

jobs:
  sca:
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-20.04"]
        manifest_file: ["pom.xml"]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    name: SCA Java project
    steps:
      - name: Checkout action
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: Install SCA tool (CRDA)
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          source: github
          github_pat: ${{ github.token }}
          crda: "latest"

      - name: Run Static Code Analysis (SCA)
        id: scan_java
        run: |
          cd decibelio  # Navegar al directorio con el archivo pom.xml
          mvn clean install

      - name: Print JSON analysis report
        if: ${{ always() && steps.scan_java.outputs.crda_report_json }}
        run: cat ${{ steps.scan_java.outputs.crda_report_json }}

      - name: Print SARIF analysis report
        if: ${{ always() && steps.scan_java.outputs.crda_report_sarif }}
        run: cat ${{ steps.scan_java.outputs.crda_report_sarif }}

      - name: Print Report Link
        run: echo ${{ steps.scan_java.outputs.report_link }}

      - name: Print Artifact Name
        run: echo ${{ steps.scan_java.outputs.artifact_name }}

  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    steps:
    # Paso 1: Clonar el repositorio
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Deshabilitar clones superficiales para mejorar la relevancia del an치lisis

    # Paso 2: Configurar Java
    - name: Setup Java
      uses: actions/setup-java@v2
      with:
        distribution: temurin
        java-version: 17
        cache: maven

    # Paso 3: Compilar el proyecto
    - name: Build project
      run: |
        cd decibelio 
        mvn clean install

    # Paso 4: Ejecutar an치lisis SonarQube
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Token para obtener informaci칩n del Pull Request
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # Token para autenticaci칩n con SonarQube
      with:
        args: >
          -Dsonar.projectKey=KBGR55_DECIBELIO
          -Dsonar.organization=kbgr55
          -Dsonar.projectName=DECIBELIO
          -Dsonar.projectVersion=1.0
          -Dsonar.sources=.
          -Dsonar.sourceEncoding=UTF-8
          -Dsonar.java.binaries=decibelio/target/classes
          -Dsonar.c.file.suffixes=-
          -Dsonar.cpp.file.suffixes=-
          -Dsonar.objc.file.suffixes=-
